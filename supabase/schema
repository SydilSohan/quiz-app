
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."privacy" AS ENUM (
    'public',
    'private'
);

ALTER TYPE "public"."privacy" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
begin
  insert into public.profiles (id, first_name, last_name, email)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email);
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_user_update"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$begin
  -- update the row in public.profiles
  update public.profiles
  set first_name = new.raw_user_meta_data ->> 'first_name',
  last_name = new.raw_user_meta_data ->> 'last_name',

  

      email = new.email,
      metadata = new.raw_user_meta_data::jsonb
  where id = new.id;

  -- if the row doesn't exist, insert a new row
  if not found then
    insert into public.profiles (id, first_name, last_name,  email, metadata)
    values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email, new.raw_user_meta_data::jsonb);
  end if;

  return new;
end;$$;

ALTER FUNCTION "public"."handle_user_update"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."quizzes" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "questions" "jsonb" NOT NULL,
    "instructions" "text" DEFAULT ''::"text" NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "image" "text" DEFAULT ''::"text",
    "answers" "jsonb",
    "inst" "text" DEFAULT ''::"text",
    "logo" "text",
    "time" numeric DEFAULT '20'::numeric,
    "user_id" "uuid" NOT NULL,
    "privacy" "public"."privacy" DEFAULT 'public'::"public"."privacy" NOT NULL
);

ALTER TABLE "public"."quizzes" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."exam" AS
 SELECT "quizzes"."id",
    "quizzes"."instructions",
    "quizzes"."image",
    "quizzes"."questions",
    "quizzes"."logo",
    "quizzes"."inst",
    "quizzes"."time",
    "quizzes"."user_id",
    "quizzes"."name"
   FROM "public"."quizzes";

ALTER TABLE "public"."exam" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" "text",
    "metadata" "jsonb",
    "first_name" "text",
    "last_name" "text"
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

ALTER TABLE "public"."quizzes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."quizzes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."quizzes_view" AS
 SELECT "jsonb_set"("quizzes"."questions", '{answer}'::"text"[], 'null'::"jsonb") AS "questions"
   FROM "public"."quizzes";

ALTER TABLE "public"."quizzes_view" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."submissions" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone NOT NULL,
    "answers" "jsonb"[],
    "quiz_id" bigint NOT NULL,
    "grade" "text",
    "score" smallint,
    "submitter" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "results" "jsonb"[],
    "ended_at" timestamp with time zone
);

ALTER TABLE "public"."submissions" OWNER TO "postgres";

ALTER TABLE "public"."submissions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."submissions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."userquiz" AS
 SELECT "quizzes"."id",
    "quizzes"."instructions",
    "quizzes"."image",
    "quizzes"."questions",
    "quizzes"."logo",
    "quizzes"."inst",
    "quizzes"."time",
    "quizzes"."user_id",
    "quizzes"."name"
   FROM "public"."quizzes";

ALTER TABLE "public"."userquiz" OWNER TO "postgres";

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."quizzes"
    ADD CONSTRAINT "quizzes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."submissions"
    ADD CONSTRAINT "submissions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."submissions"
    ADD CONSTRAINT "public_submissions_quiz_id_fkey" FOREIGN KEY ("quiz_id") REFERENCES "public"."quizzes"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."submissions"
    ADD CONSTRAINT "public_submissions_submitter_fkey" FOREIGN KEY ("submitter") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."quizzes"
    ADD CONSTRAINT "quizzes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");

CREATE POLICY "Admin access" ON "public"."submissions" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."quizzes"
  WHERE (("quizzes"."id" = "submissions"."quiz_id") AND ("quizzes"."user_id" = "auth"."uid"())))));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."quizzes" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."submissions" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "submitter"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."quizzes" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."quizzes" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for all users" ON "public"."quizzes" FOR SELECT USING (true);

CREATE POLICY "Id Access" ON "public"."profiles" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "logged in" ON "public"."submissions" FOR INSERT TO "authenticated" WITH CHECK (true);

ALTER TABLE "public"."quizzes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."submissions" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "update based on user_id" ON "public"."submissions" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "submitter"));

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_user_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_user_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_user_update"() TO "service_role";

GRANT ALL ON TABLE "public"."quizzes" TO "anon";
GRANT ALL ON TABLE "public"."quizzes" TO "authenticated";
GRANT ALL ON TABLE "public"."quizzes" TO "service_role";

GRANT ALL ON TABLE "public"."exam" TO "anon";
GRANT ALL ON TABLE "public"."exam" TO "authenticated";
GRANT ALL ON TABLE "public"."exam" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."quizzes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."quizzes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."quizzes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."quizzes_view" TO "anon";
GRANT ALL ON TABLE "public"."quizzes_view" TO "authenticated";
GRANT ALL ON TABLE "public"."quizzes_view" TO "service_role";

GRANT ALL ON TABLE "public"."submissions" TO "anon";
GRANT ALL ON TABLE "public"."submissions" TO "authenticated";
GRANT ALL ON TABLE "public"."submissions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."submissions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."submissions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."submissions_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."userquiz" TO "anon";
GRANT ALL ON TABLE "public"."userquiz" TO "authenticated";
GRANT ALL ON TABLE "public"."userquiz" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
