create table "public"."submissions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "answers" jsonb[],
    "quiz_id" bigint,
    "grade" text,
    "score" smallint,
    "submitter" uuid default auth.uid()
);


alter table "public"."submissions" enable row level security;

CREATE UNIQUE INDEX submissions_pkey ON public.submissions USING btree (id);

alter table "public"."submissions" add constraint "submissions_pkey" PRIMARY KEY using index "submissions_pkey";

alter table "public"."submissions" add constraint "public_submissions_quiz_id_fkey" FOREIGN KEY (quiz_id) REFERENCES quizzes(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."submissions" validate constraint "public_submissions_quiz_id_fkey";

grant delete on table "public"."submissions" to "anon";

grant insert on table "public"."submissions" to "anon";

grant references on table "public"."submissions" to "anon";

grant select on table "public"."submissions" to "anon";

grant trigger on table "public"."submissions" to "anon";

grant truncate on table "public"."submissions" to "anon";

grant update on table "public"."submissions" to "anon";

grant delete on table "public"."submissions" to "authenticated";

grant insert on table "public"."submissions" to "authenticated";

grant references on table "public"."submissions" to "authenticated";

grant select on table "public"."submissions" to "authenticated";

grant trigger on table "public"."submissions" to "authenticated";

grant truncate on table "public"."submissions" to "authenticated";

grant update on table "public"."submissions" to "authenticated";

grant delete on table "public"."submissions" to "service_role";

grant insert on table "public"."submissions" to "service_role";

grant references on table "public"."submissions" to "service_role";

grant select on table "public"."submissions" to "service_role";

grant trigger on table "public"."submissions" to "service_role";

grant truncate on table "public"."submissions" to "service_role";

grant update on table "public"."submissions" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."submissions"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = submitter));


create policy "Enable read access for all users"
on "public"."submissions"
as permissive
for all
to public
using (true);


CREATE TRIGGER exam_result AFTER INSERT ON public.submissions FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://localhost:3000/api/exams', 'POST', '{"Content-type":"application/json"}', '{}', '4000');

CREATE TRIGGER exam_results AFTER INSERT ON public.submissions FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://localhost:3000/api/exams', 'POST', '{"Content-type":"application/json"}', '{}', '1000');


